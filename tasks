from celery import shared_task
from datetime import timedelta
from django.utils import timezone
from .models import Book
from django.contrib.auth.models import User
from .models import Notification
import logging
from users.models import Profile
logger = logging.getLogger(__name__)

...

@shared_task
def send_abandoned_notification(book_id):
    try:
        book = Book.objects.get(id=book_id)
        abandoned_threshold = timezone.now() - timedelta(minutes=5)

        if book.status == 'translating' and book.last_activity_date <= abandoned_threshold:
            # Створити сповіщення для профілю користувача, який володіє цією книгою
            notification_message = f'Книга "{book.title}" буде перенесена в статус "Покинуті" через Х днів бездіяльності.'
            for profile in Profile.objects.filter(user=book.user):
                notification = Notification.objects.create(user_profile=profile, message=notification_message)
                logger.info(f'Sent notification: {notification.message} to {profile.user.username}')
    except Book.DoesNotExist:
        logger.error(f"Book with id {book_id} not found.")


def get_reergard_user():

    
    user, created = User.objects.get_or_create(username='reergard_user')
    return user


@shared_task
def simple_debug_task():
    print("Simple debug task executed successfully")
